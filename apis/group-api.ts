/* tslint:disable */
/* eslint-disable */
/**
 * Vio-V
 * Vio-V API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GangArea } from '../models';
import { Group } from '../models';
import { GroupMember } from '../models';
import { GroupOwnFactory } from '../models';
import { GroupRank } from '../models';
import { GroupShop } from '../models';
import { GroupSkin } from '../models';
import { GroupSpray } from '../models';
import { GroupStorageLog } from '../models';
import { GroupVehicle } from '../models';
import { Storages } from '../models';
/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Group Areas Data (GangWars)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupAreasGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/areas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Factories Data | Squad only!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupFactoriesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/factories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Server Fairplay Blacklist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupFairplayBlacklistGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/fairplay_blacklist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Members Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupMembersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Produktion Factories Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupOwnFactoriesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/own_factories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group AT Items Data | Police only!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPoliceEvidenceGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/police_evidence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Rank Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupRanksGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/ranks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Shops
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupShopsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/shops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Skin Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupSkinGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/skin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Spraies Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupSpraiesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/spraies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Storage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupStorageGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Storage Logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupStorageLogsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/storage/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Vehicles Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupVehiclesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/vehicles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication vio_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("vio_auth", ["read.group.info", "read.group.members", "read.group.storage", "read.group.storage.logs", "read.group.vehicles", "read.group.area", "read.group.shop", "read.group.factory", "read.group.ownfactory", "read.group.shops", "read.self.info", "read.self.storage", "read.self.playingtime"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Group Areas Data (GangWars)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupAreasGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GangArea>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupAreasGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group Factories Data | Squad only!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupFactoriesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupSpray>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupFactoriesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Server Fairplay Blacklist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupFairplayBlacklistGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupSpray>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupFairplayBlacklistGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Group>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group Members Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupMembersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupMember>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupMembersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group Produktion Factories Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupOwnFactoriesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupOwnFactory>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupOwnFactoriesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group AT Items Data | Police only!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupPoliceEvidenceGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupSpray>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupPoliceEvidenceGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group Rank Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupRanksGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupRank>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupRanksGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group Shops
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupShopsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupShop>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupShopsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group Skin Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupSkinGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupSkin>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupSkinGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group Spraies Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupSpraiesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupSpray>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupSpraiesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group Storage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupStorageGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Storages>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupStorageGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group Storage Logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupStorageLogsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupStorageLog>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupStorageLogsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Group Vehicles Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupVehiclesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupVehicle>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupVehiclesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get Group Areas Data (GangWars)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupAreasGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GangArea>>> {
            return GroupApiFp(configuration).groupAreasGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Factories Data | Squad only!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupFactoriesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupSpray>>> {
            return GroupApiFp(configuration).groupFactoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Server Fairplay Blacklist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupFairplayBlacklistGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupSpray>>> {
            return GroupApiFp(configuration).groupFairplayBlacklistGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Group>> {
            return GroupApiFp(configuration).groupGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Members Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupMembersGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupMember>>> {
            return GroupApiFp(configuration).groupMembersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Produktion Factories Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupOwnFactoriesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupOwnFactory>>> {
            return GroupApiFp(configuration).groupOwnFactoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group AT Items Data | Police only!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupPoliceEvidenceGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupSpray>>> {
            return GroupApiFp(configuration).groupPoliceEvidenceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Rank Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupRanksGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupRank>>> {
            return GroupApiFp(configuration).groupRanksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Shops
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupShopsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupShop>>> {
            return GroupApiFp(configuration).groupShopsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Skin Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupSkinGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupSkin>>> {
            return GroupApiFp(configuration).groupSkinGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Spraies Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupSpraiesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupSpray>>> {
            return GroupApiFp(configuration).groupSpraiesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Storage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupStorageGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Storages>> {
            return GroupApiFp(configuration).groupStorageGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Storage Logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupStorageLogsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupStorageLog>>> {
            return GroupApiFp(configuration).groupStorageLogsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Vehicles Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupVehiclesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupVehicle>>> {
            return GroupApiFp(configuration).groupVehiclesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
    /**
     * 
     * @summary Get Group Areas Data (GangWars)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupAreasGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GangArea>>> {
        return GroupApiFp(this.configuration).groupAreasGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group Factories Data | Squad only!
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupFactoriesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupSpray>>> {
        return GroupApiFp(this.configuration).groupFactoriesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Server Fairplay Blacklist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupFairplayBlacklistGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupSpray>>> {
        return GroupApiFp(this.configuration).groupFairplayBlacklistGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Group>> {
        return GroupApiFp(this.configuration).groupGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group Members Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupMembersGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupMember>>> {
        return GroupApiFp(this.configuration).groupMembersGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group Produktion Factories Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupOwnFactoriesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupOwnFactory>>> {
        return GroupApiFp(this.configuration).groupOwnFactoriesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group AT Items Data | Police only!
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupPoliceEvidenceGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupSpray>>> {
        return GroupApiFp(this.configuration).groupPoliceEvidenceGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group Rank Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupRanksGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupRank>>> {
        return GroupApiFp(this.configuration).groupRanksGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group Shops
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupShopsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupShop>>> {
        return GroupApiFp(this.configuration).groupShopsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group Skin Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupSkinGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupSkin>>> {
        return GroupApiFp(this.configuration).groupSkinGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group Spraies Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupSpraiesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupSpray>>> {
        return GroupApiFp(this.configuration).groupSpraiesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group Storage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupStorageGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Storages>> {
        return GroupApiFp(this.configuration).groupStorageGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group Storage Logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupStorageLogsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupStorageLog>>> {
        return GroupApiFp(this.configuration).groupStorageLogsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Group Vehicles Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async groupVehiclesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupVehicle>>> {
        return GroupApiFp(this.configuration).groupVehiclesGet(options).then((request) => request(this.axios, this.basePath));
    }
}
